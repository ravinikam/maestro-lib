/*
 * Copyright {{year}} General Electric Company. All rights reserved.
 */
package {{configPackage}};

import {{package}}.{{classname}};
{{#imports}}import {{import}};
{{/imports}}

import io.swagger.annotations.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
{{#async}}
import java.util.concurrent.Callable;
{{/async}}
{{#useBeanValidation}}
import javax.validation.constraints.*;
import javax.validation.Valid;
{{/useBeanValidation}}

/**
 * Service entry point over network for {{artifactId}}.
 *
 * Auto generated class, do not modify. If required update specification({{artifactId}}.yaml) instead.
 */
@RestController
@RequestMapping(produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@Api(value = "{{{artifactId}}}", description = "the {{{artifactId}}} API")
{{>generatedAnnotation}}{{#operations}}
public class {{classname}}Controller implements {{classname}}
{

    private final {{classname}} {{classVarName}}Impl;

    @Autowired
    public {{classname}}Controller({{classname}} {{classVarName}}Impl)
    {
        this.{{classVarName}}Impl = {{classVarName}}Impl;
    }

{{#operation}}
    @Override
    @ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}", response = {{{returnType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}{{#hasAuthMethods}}, authorizations = {
    {{#authMethods}}@Authorization(value = "{{name}}"{{#isOAuth}}, scopes = {
    {{#scopes}}@AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{#hasMore}},
    {{/hasMore}}{{/scopes}} }{{/isOAuth}}){{#hasMore}}, {{/hasMore}}{{/authMethods}} }{{/hasAuthMethods}}, tags={ {{#vendorExtensions.x-tags}}"{{tag}}",{{/vendorExtensions.x-tags}} })
    @ApiResponses(value = { {{#responses}}
        @ApiResponse(code = {{{code}}}, message = "{{{message}}}", response = {{{returnType}}}.class){{#hasMore}},{{/hasMore}}{{/responses}} })
    {{#implicitHeaders}}@ApiImplicitParams({ {{#headerParams}}{{>implicitHeader}}{{/headerParams}} }){{/implicitHeaders}}
    @RequestMapping(value = "{{{path}}}",{{#singleContentTypes}}
        produces = "{{{vendorExtensions.x-accepts}}}",
        consumes = "{{{vendorExtensions.x-contentType}}}",{{/singleContentTypes}}{{^singleContentTypes}}{{#hasConsumes}}
        consumes = { {{#consumes}}MediaType.APPLICATION_JSON_UTF8_VALUE{{#hasMore}}, {{/hasMore}}{{/consumes}} },{{/hasConsumes}}{{/singleContentTypes}}
        method = RequestMethod.{{httpMethod}})
    public {{#async}}Callable<{{/async}}{{>returnTypes}}{{#async}}>{{/async}} {{operationId}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    {
        {{^async}}
        {{#returnBaseType}}return{{/returnBaseType}} {{classVarName}}Impl.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{/async}}
        {{#async}}{{#returnBaseType}}return{{/returnBaseType}} new Callable<{{>returnTypes}}>()
        {
            @Override
            public {{>returnTypes}} call() throws Exception
            {
                {{#returnBaseType}}return{{/returnBaseType}} {{classVarName}}Impl.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            }
        };{{/async}}
    }
{{/operation}}

}
{{/operations}}
