/*
 * Copyright {{year}} Feb29 Company. All rights reserved.
 */

package {{basePackage}}.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.util.StopWatch;
import org.springframework.util.StringUtils;

/**
 * This is used to provide logging in {{artifactId}} service, it helps to keep logging statements separate
 * from business logic.
 */
@Aspect
@Component
{{>generatedAnnotation}}
public class LoggingAspect
{
    private static final Logger LOGGER = LoggerFactory.getLogger(LoggingAspect.class);

    /**
     * Around advice to log public methods input params, returned result and execution time.
     *
     * @param pjp ProceedingJoinPoint
     * @return result of actual method execution
     * @throws Throwable exception thrown by actual method
     */
    @Around("within({{basePackage}}.impl..*)")
    public Object profile(ProceedingJoinPoint pjp) throws Throwable
    {
        if (LOGGER.isDebugEnabled())
        {
            String message = String.format("Calling   >> %s(%s) of class %s ", pjp.getSignature().getName(),
                                StringUtils.arrayToCommaDelimitedString(pjp.getArgs()),
                                pjp.getTarget().getClass().getName());
            LOGGER.debug(message);
        }

        StopWatch stopwatch = new StopWatch();
        Object result = null;
        try
        {
            stopwatch.start();
            result = pjp.proceed();
            return result;
        }
        finally
        {
            stopwatch.stop();
            if (LOGGER.isDebugEnabled())
            {
                String methodName = pjp.getSignature().getName();
                String cls = pjp.getTarget().getClass().getName();
                LOGGER.debug(String.format("Returning << %s(): %s in %s ms of class %s", methodName, result,
                stopwatch.getTotalTimeMillis(), cls));
            }
        }
    }
}
